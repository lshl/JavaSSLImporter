/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'shlomi.levi' at '25/05/17 3:24 PM' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def packageTitle  = "Java SSL certificate importer"
def versions = [:]
def revmaj   = ~/^\s+public\s+static\s+final\s+int\s+MAJOR\s+=\s+(\d+)\s*;/
def revmin   = ~/^\s+public\s+static\s+final\s+int\s+MINOR\s+=\s+(\d+)\s*;/
def revbld   = ~/^(\s+public\s+static\s+final\s+int\s+BUILD_NUMBER\s+=\s+)(\d+)\s*;/
def verpth   = "src/main/java/org/lshl/SSLImporterVersion.java"
task read_versions {
    description 'Reads the version file ${verpth}'
    def versions_file = new File(verpth)
    //println "read_versions  "+versions_file+" exists "+versions_file.exists()
    try {
        versions_file.eachLine {
            line ->
                def matcher = revmaj.matcher(line)
                if (matcher.find()) {
                    versions["major"] = matcher.group(1) as Integer
                }
                matcher = revmin.matcher(line)
                if (matcher.find()) {
                    versions["minor"] = matcher.group(1) as Integer
                }
                matcher = revbld.matcher(line)
                if (matcher.find()) {
                    versions["build"] = matcher.group(2) as Integer
                }
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace()
        println "Cannot find file " + versions_file.absolutePath
    }
//  versions["str"] = versions["major"] + "." + versions["minor"] + "-" + versions["build"] + snapshot
    versions["str"] = versions["major"] + "." + versions["minor"] + "-" + versions["build"]
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jar {
    version versions.str
    manifest {
        attributes("Package-Title"  : packageTitle,
                   "Package-Version": version,
                   "Main-Class"     : "org.lshl.util.SSLImport")
    }
}

compileJava {
    doFirst {
        def versions_file = new File(verpth)
        def contents      = versions_file.getText()
        def date_millis   = new Date().getTime();
        contents = contents.replaceAll("(\\s+public\\s+static\\s+final\\s+Date\\s+BUILD_DATE\\s+=\\s+).+;", "\$1new Date(${date_millis}L);")
        versions_file.write(contents)
    }
}

build {
    doLast {
        ++versions.build
        def versions_file = new File(verpth)
        def contents      = versions_file.getText()
        contents = contents.replaceAll("(\\s+public\\s+static\\s+final\\s+int\\s+BUILD_NUMBER\\s+=\\s+)(\\d+)\\s*;", "\$1${versions.build};")
        versions_file.write(contents)
    }
}

